basically there are three types of stages available in git Version Control
1. Working area/Modified space
2. Staging area
3. Repository/Committed space

git init -> At first we have to make the particular folder a git folder
This will create a .git file in that particular location for version control

ls -la -> Show all file at that particular directory including hidden.

rm -rf .git -> undo the git init command by removing the .git file created in the directory for version control. 

git status -> It will show all un-commited files in the working space
This will be displayed in RED.

touch .gitignore -> This will create .gitignore file in the directory. There will be lot of files that we dont want to be get tracked by git. this files may be created as configuration file of IDE or any thing else. Details of all this file can be added to .gitignore file.This file can be opened using a text editor or by IDE.

git add -> This command is used to add files from working area to staging area. This can be done individually on each file or all at once
eg git add -A (all at once) or git add filename (One file at a time).

git reset -> This command will remove all the files from the staging area and bring back to working area. This bascically undo the git add command. eg  git reset ( remove all files) git reset <file name> (remove particular file).

git commit -m -> This command is used for the final commit with a message.Here message is compulsary. eg git commit -m "First Commit"

git log ->This will give the log of commit done.

git config --list ->shows all the configuration added to the git.

-------------------------------------------------------------------------------------------------
git clone <url> <where to clone> -> This command is used to clone a remote repository to your local repository and start working on it.
e.g git clone https://Umeshengg11/RoutingTable.git . (here the last dot represents the current directory) Here it is not necessary that cloning is only from the remote repository, we can clone from local repository as well.In place of <url> give <location of the localRep from data to be cloned>.

git remote -v -> view information about cloned remote repository.

git branch -a -> view branch information about cloned remote repository
